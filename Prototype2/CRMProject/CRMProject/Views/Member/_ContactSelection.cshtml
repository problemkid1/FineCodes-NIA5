@model MultiSelectList

<div class="form-group">
    <label for="contactSearch">Search for Contact</label>
    <div class="input-group">
        <input type="text" id="contactSearch" class="form-control" placeholder="Type to search...">
        <div class="input-group-append">
            <button type="button" id="btnAddContact" class="btn btn-primary">Add</button>
        </div>
    </div>
    <div id="searchResultsContainer" style="position: relative;">
        <div id="searchResults" class="list-group" style="display:none; position:absolute; z-index:1000; width:100%; max-height:200px; overflow-y:auto; background-color:white; border:1px solid #ddd;"></div>
    </div>
</div>

<h5 class="mt-3">Selected Contacts</h5>
<div id="selectedContactsContainer">
    <ul id="selectedContactsList" class="list-group">
        @if (Model != null && Model.Any())
        {
            @foreach (var item in Model)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center" data-id="@item.Value">
                    @item.Text
                    <button type="button" class="btn btn-sm btn-danger remove-contact">Remove</button>
                </li>
            }
        }
    </ul>

    <!-- No contacts message - initially hidden if there are contacts -->
    <div id="noContactsMessage" class="alert alert-info mt-2 @(Model != null && Model.Any() ? "d-none" : "")">
        No contacts assigned yet
    </div>
</div>

<!-- Hidden fields for selected contacts -->
@if (Model != null)
{
    @foreach (var item in Model)
    {
        <input type="hidden" name="selectedContacts" value="@item.Value" class="contact-id-field" />
    }
}

<script>
    $(document).ready(function () {
        console.log("Contact selection script initialized");

        let searchTimeout;
        let selectedContact = null;
        let allContacts = []; // Store all contacts

        // Check if there are any contacts initially and show/hide the message
        updateNoContactsMessage();

        // Load all contacts when the input field is focused
        $("#contactSearch").on("focus", function () {
            if (allContacts.length === 0) {
                // Only load all contacts if we haven't already
                loadAllContacts();
            } else {
                // If we already have contacts, just display them
                displaySearchResults(allContacts);
            }
        });

        // Function to load all contacts
        function loadAllContacts() {
            console.log("Loading all contacts");
            $.ajax({
                url: '/Contact/GetAllContacts',
                success: function (data) {
                    console.log("All contacts loaded:", data);

                    // Check if the response has a 'contacts' property (paginated format)
                    if (data.contacts) {
                        allContacts = data.contacts;
                    } else if (Array.isArray(data)) {
                        // Handle the old format (direct array)
                        allContacts = data;
                    } else {
                        console.error("Unexpected data format:", data);
                        allContacts = [];
                    }

                    displaySearchResults(allContacts);
                },
                error: function (xhr, status, error) {
                    console.error("Error loading all contacts:", error);
                    console.error("Status:", status);
                    console.error("Response:", xhr.responseText);
                }
            });
        }

        // Handle search input
        $("#contactSearch").on("keyup", function () {
            const searchTerm = $(this).val().trim().toLowerCase();
            console.log("Search term:", searchTerm);

            // Clear previous timeout
            clearTimeout(searchTimeout);

            // If we have all contacts already loaded
            if (allContacts.length > 0) {
                // Filter the existing contacts
                if (searchTerm === "") {
                    // Show all contacts if search term is empty
                    displaySearchResults(allContacts);
                } else {
                    // Filter contacts based on search term
                    const filteredContacts = allContacts.filter(contact =>
                        contact.label.toLowerCase().includes(searchTerm)
                    );
                    displaySearchResults(filteredContacts);
                }
                return;
            }

            // If we don't have all contacts loaded yet, use the server-side search
            // Set a timeout to prevent too many requests
            searchTimeout = setTimeout(function () {
                if (searchTerm === "") {
                    // Load all contacts if search term is empty
                    loadAllContacts();
                    return;
                }

                if (searchTerm.length >= 2) {
                    console.log("Sending search request for:", searchTerm);
                    $.ajax({
                        url: '/Contact/SearchContacts',
                        data: { term: searchTerm },
                        success: function (data) {
                            console.log("Search results:", data);
                            displaySearchResults(data);
                        },
                        error: function (xhr, status, error) {
                            console.error("Error searching contacts:", error);
                            console.error("Status:", status);
                            console.error("Response:", xhr.responseText);
                            console.error("Status code:", xhr.status);
                            $("#searchResults").hide();
                        }
                    });
                }
            }, 300);
        });

        // Display search results
        function displaySearchResults(results) {
            const $results = $("#searchResults");
            $results.empty();

            if (results && results.length > 0) {
                results.forEach(function (contact) {
                    $results.append(`
                            <a href="#" class="list-group-item list-group-item-action contact-result"
                               data-id="${contact.id}" data-label="${contact.label}">
                                ${contact.label}
                            </a>
                        `);
                });
                $results.show();
                console.log("Showing results dropdown with", results.length, "contacts");
            } else {
                $results.append(`
                        <div class="list-group-item text-muted">
                            No contacts found
                        </div>
                    `);
                $results.show();
                console.log("Showing 'No contacts found' message");
            }
        }

        // Handle search result selection
        $(document).on("click", ".contact-result", function (e) {
            e.preventDefault();

            selectedContact = {
                id: $(this).data("id"),
                label: $(this).data("label")
            };

            console.log("Selected contact:", selectedContact);
            $("#contactSearch").val(selectedContact.label);
            $("#searchResults").hide();
        });

        // Hide search results when clicking outside
        $(document).on("click", function (e) {
            if (!$(e.target).closest("#contactSearch, #searchResults").length) {
                $("#searchResults").hide();
            }
        });

        // Add contact button click handler
        $("#btnAddContact").on("click", function () {
            console.log("Add contact button clicked");

            if (selectedContact) {
                addContact(selectedContact.id, selectedContact.label);
                $("#contactSearch").val('');
                selectedContact = null;
                $("#searchResults").hide();
            } else {
                const searchTerm = $("#contactSearch").val().trim();
                if (searchTerm) {
                    // Try to find a matching contact in our loaded contacts
                    if (allContacts.length > 0) {
                        const matchingContact = allContacts.find(c =>
                            c.label.toLowerCase() === searchTerm.toLowerCase() ||
                            c.label.toLowerCase().includes(searchTerm.toLowerCase())
                        );

                        if (matchingContact) {
                            addContact(matchingContact.id, matchingContact.label);
                            $("#contactSearch").val('');
                            $("#searchResults").hide();
                            return;
                        }
                    }

                    // If no matching contact found locally, search on the server
                    $.ajax({
                        url: '/Contact/SearchContacts',
                        data: { term: searchTerm },
                        success: function (data) {
                            console.log("Search results for adding:", data);
                            if (data && data.length > 0) {
                                addContact(data[0].id, data[0].label);
                                $("#contactSearch").val('');
                                $("#searchResults").hide();
                            } else {
                                alert("No contacts found matching: " + searchTerm);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error adding contact:", error);
                            alert("Error searching for contact. Please try again.");
                        }
                    });
                } else {
                    alert("Please enter a contact name to search");
                }
            }
        });

        // Support pressing Enter in the search field
        $("#contactSearch").on("keypress", function (e) {
            if (e.which === 13) { // Enter key
                e.preventDefault();
                $("#btnAddContact").click();
            }
        });

        // Remove contact button click handler
        $(document).on("click", ".remove-contact", function () {
            console.log("Remove button clicked");
            const $item = $(this).closest("li");
            const contactId = $item.data("id");

            // Remove the hidden field for this contact
            $(`input.contact-id-field[value="${contactId}"]`).remove();

            // Remove the list item
            $item.remove();

            // Check if there are any contacts left and show/hide the message
            updateNoContactsMessage();
        });

        // Function to add a contact to the selected list
        function addContact(contactId, contactName) {
            console.log("Adding contact:", contactId, contactName);

            // Check if contact already exists in the list
            if ($("#selectedContactsList li[data-id='" + contactId + "']").length === 0) {
                // Add the contact to the list
                $("#selectedContactsList").append(`
                        <li class="list-group-item d-flex justify-content-between align-items-center" data-id="${contactId}">
                            ${contactName}
                            <button type="button" class="btn btn-sm btn-danger remove-contact">Remove</button>
                        </li>
                    `);

                // Add a hidden field for this contact
                $('<input>').attr({
                    type: 'hidden',
                    name: 'selectedContacts',
                    value: contactId,
                    class: 'contact-id-field'
                }).appendTo('form');

                // Hide the "No contacts" message since we now have at least one contact
                $("#noContactsMessage").addClass("d-none");
            } else {
                alert("This contact is already in the list");
            }
        }

        // Function to check if there are any contacts and show/hide the message accordingly
        function updateNoContactsMessage() {
            const contactCount = $("#selectedContactsList li").length;
            console.log("Contact count:", contactCount);

            if (contactCount === 0) {
                // Show the "No contacts" message
                $("#noContactsMessage").removeClass("d-none");
            } else {
                // Hide the "No contacts" message
                $("#noContactsMessage").addClass("d-none");
            }
        }
    });
</script>
