@{
    ViewData["Title"] = "CRM";
    var newMemberCount = ViewData["NewMemberCount"] ?? 0;
}

<!-- Custom styles for this template-->
<link href="~/customs/css/style.css" rel="stylesheet">
<link href="~/theme/css/custom-colors.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">

<div class="container-fluid" id="dashboardContainer">
    <!-- Page Heading with Edit Controls -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
        @if (User.IsInRole("Super") || User.IsInRole("Admin"))
        {
            <div class="dashboard-controls">
                <button id="editDashboardBtn" class="btn btn-primary" style="min-height: 50px; min-width: 155px; align-content: center;">
                    <i class="fas fa-edit mr-1"></i> Edit Dashboard
                </button>
                <!-- Rest of your controls -->
                <div id="dashboardEditControls" style="display: none;">
                    <button id="saveDashboardBtn" class="btn btn-success mr-2" style="min-height: 50px; min-width: 155px; align-content: center;">
                        <i class="fas fa-save mr-1"></i> Save Changes
                    </button>
                    <button id="cancelEditBtn" class="btn btn-secondary" style="min-height: 50px; min-width: 155px; align-content: center;">
                        <i class="fas fa-times mr-1"></i> Cancel
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Layout Controls - Only visible in edit mode -->
    <div id="layoutControls" class="card shadow mb-4" style="display: none;">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Dashboard Layout</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label class="font-weight-bold">Layout Type:</label>
                        <div class="btn-group btn-group-toggle w-100" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="layoutType" id="layoutStandard" value="standard" checked> Standard
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="layoutType" id="layoutSplit" value="split"> Split View
                            </label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group" id="splitViewOptions" style="display: none;">
                        <label class="font-weight-bold">Split View Configuration:</label>
                        <div class="btn-group btn-group-toggle w-100" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="splitConfig" id="splitConfigMetricsLeft" value="metricsLeft" checked> Metrics Left
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="splitConfig" id="splitConfigChartsLeft" value="chartsLeft"> Charts Left
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Auto-refresh option -->
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="font-weight-bold">Auto-refresh Data:</label>
                        <div class="input-group">
                            <select id="refreshInterval" class="form-control">
                                <option value="0">Disabled</option>
                                <option value="30">Every 30 seconds</option>
                                <option value="60">Every minute</option>
                                <option value="300">Every 5 minutes</option>
                            </select>
                            <div class="input-group-append">
                                <button id="applyRefreshBtn" class="btn btn-primary">Apply</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Content -->
    <div id="dashboardContent">
        <!-- Container for metrics cards -->
        <div id="metricsContainer" class="row">
            <!-- Total Members -->
            <div class="col-xl-3 col-md-6 mb-4 metrics-item">
                <div class="widget" data-widget-id="total-members">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove Total Members widget"><i class="fas fa-times"></i></button>
                    </div>
                    <a href="/Member" class="text-decoration-none flex-grow-1">
                        <div class="card border-left-primary shadow h-100">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-4">
                                            <h5>Total Members</h5>
                                        </div>
                                        <div class="h1 mb-0 font-weight-bold text-gray-1200">
                                            <span class="count-up" data-value="@ViewData["MemberCount"]">@ViewData["MemberCount"]</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- Industries -->
            <div class="col-xl-3 col-md-6 mb-4 metrics-item">
                <div class="widget" data-widget-id="industries">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove Industries widget"><i class="fas fa-times"></i></button>
                    </div>
                    <a href="/Industry" class="text-decoration-none flex-grow-1">
                        <div class="card border-left-success shadow h-100">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-4">
                                            <h5>Industries</h5>
                                        </div>
                                        <div class="h1 mb-0 font-weight-bold text-gray-1200">
                                            <span class="count-up" data-value="@ViewData["IndustryCount"]">@ViewData["IndustryCount"]</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- Cancellations -->
            <div class="col-xl-3 col-md-6 mb-4 metrics-item">
                <div class="widget" data-widget-id="cancellations">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove Cancellations widget"><i class="fas fa-times"></i></button>
                    </div>
                    <a href="/Member?MemberStatus=Cancelled" class="text-decoration-none flex-grow-1">
                        <div class="card border-left-danger shadow h-100">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-4">
                                            <h5>Cancellations</h5>
                                        </div>
                                        <div class="h1 mb-0 font-weight-bold text-gray-1200">
                                            <span class="count-up" data-value="@ViewData["CancellationCount"]">@ViewData["CancellationCount"]</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>

            <!-- New Members -->
            <div class="col-xl-3 col-md-6 mb-4 metrics-item">
                <div class="widget" data-widget-id="new-members">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove New Members widget"><i class="fas fa-times"></i></button>
                    </div>
                    <a href="/Member" class="text-decoration-none flex-grow-1">
                        <div class="card border-left-info shadow h-100">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-4">
                                            <h5>New Members (@DateTime.Now.Year)</h5>
                                        </div>
                                        <div class="h1 mb-0 font-weight-bold text-gray-1200">
                                            <span class="count-up" data-value="@newMemberCount">@newMemberCount</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
        </div>


        <!-- Container for charts -->
        <div id="chartsContainer" class="row">
            <!-- Municipality/Industry chart -->
            <div class="col-lg-6 mb-4">
                <div class="widget" data-widget-id="municipality-chart">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove Member Breakdown chart"><i class="fas fa-times"></i></button>
                    </div>
                    <div class="card shadow h-100">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h5 class="m-0 font-weight-bold text-primary">Member Breakdown</h5>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Chart view options">
                                <button type="button" class="btn btn-primary active" id="viewMunicipality">By Municipality</button>
                                <button type="button" class="btn btn-outline-primary" id="viewIndustry">By Industry</button>
                                <button type="button" class="btn btn-outline-primary" id="viewMembershipType">By Membership Type</button>
                            </div>
                        </div>
                        <div class="card-body d-flex align-items-center">
                            <div class="chart-bar w-100 chart-container">
                                <canvas id="breakdownBarChart"></canvas>
                                <div class="chart-loader" style="display: none;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Membership Pie Chart -->
            <div class="col-lg-6 mb-4">
                <div class="widget" data-widget-id="membership-pie">
                    <div class="widget-controls" style="display: none;">
                        <button class="btn btn-sm btn-danger widget-remove" aria-label="Remove Members Status Overview chart"><i class="fas fa-times"></i></button>
                    </div>
                    <div class="card shadow h-100">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h5 class="m-0 font-weight-bold text-primary">Members Status Overview</h5>
                            <div class="dropdown no-arrow">
                                <a class="dropdown-toggle" href="#" role="button" id="pieChartOptions" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="display: block; width: 100%;" aria-label="Pie Chart Options">
                                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                </a>

                                <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="pieChartOptions">
                                    <div class="dropdown-header">Chart Options:</div>
                                    <a class="dropdown-item chart-type" href="#" data-type="doughnut">Doughnut Chart</a>
                                    <a class="dropdown-item chart-type" href="#" data-type="pie">Pie Chart</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="#" id="downloadPieChart">Download Chart</a>
                                </div>
                            </div>
                        </div>
                        <div class="card-body d-flex align-items-center">
                            <div class="chart-pie w-100 chart-container">
                                <canvas id="memberPieChart"></canvas>
                                <div class="chart-loader" style="display: none;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Widget Selector Menu (Hidden by default) -->
        <div id="widgetSelector" class="card shadow mt-4" style="display: none;">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Add Widgets</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="total-members">
                            <i class="fas fa-users mr-1"></i> Total Members
                        </button>
                    </div>
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="industries">
                            <i class="fas fa-industry mr-1"></i> Industries
                        </button>
                    </div>
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="cancellations">
                            <i class="fas fa-ban mr-1"></i> Cancellations
                        </button>
                    </div>
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="new-members">
                            <i class="fas fa-user-plus mr-1"></i> New Members
                        </button>
                    </div>
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="municipality-chart">
                            <i class="fas fa-chart-bar mr-1"></i> Municipality Chart
                        </button>
                    </div>
                    <div class="col-md-3 mb-3">
                        <button class="btn btn-outline-primary btn-block add-widget" data-widget-id="membership-pie">
                            <i class="fas fa-chart-pie mr-1"></i> Membership Pie
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Last updated info -->
        <div class="text-right mt-3 mb-4">
            <small class="text-muted" style="color: #4a5568; background-color: rgb(248, 249, 252);">
                Last updated: <span id="lastUpdated" style="color: #4a5568; background-color: rgb(248, 249, 252);">@DateTime.Now.ToString("MMM dd, yyyy HH:mm:ss")</span>
                <button id="refreshDataBtn" class="btn btn-sm btn-outline-primary ml-2" style="color: #fff; border-color: #2b6cb0; min-height: 50px; min-width: 155px; align-content: center;">
                    <i class="fas fa-sync-alt"></i> Refresh Data
                </button>
            </small>
        </div>
    </div>
</div>

<script>
        function fixWidgetStructure() {
        document.querySelectorAll('.widget').forEach(widget => {
            // Make sure the widget has a proper structure
            const link = widget.querySelector('a');
            if (link) {
                // Ensure the link has proper styling
                link.style.display = 'block';
                link.style.width = '100%';

                // Make sure the card is visible
                const card = link.querySelector('.card');
                if (card) {
                    card.style.display = 'block';
                    card.style.visibility = 'visible';
                    card.style.opacity = '1';

                    // Make sure the card body is visible
                    const cardBody = card.querySelector('.card-body');
                    if (cardBody) {
                        cardBody.style.display = 'block';
                        cardBody.style.visibility = 'visible';
                        cardBody.style.opacity = '1';
                    }
                }
            }
        });

        console.log("Widget structure fixed");
    }

    document.addEventListener("DOMContentLoaded", function() {
    // Add responsive styles for charts
    const styleElement = document.createElement('style');
    styleElement.type = 'text/css';
    styleElement.textContent = `
    @@media (min-width: 768px) and (max-width: 1200px) {
            .chart-container {
                min-height: 300px !important;
                max-height: 350px !important;
            }

            .card-header .btn-group-sm .btn {
                padding: 0.25rem 0.4rem;
                font-size: 0.75rem;
            }

            .card-header h5 {
                font-size: 1rem;
            }

            #chartViewDropdown {
                font-size: 0.8rem;
                padding: 0.25rem 0.5rem;
            }
        }
    `;
    document.head.appendChild(styleElement);

        // Fix widget structure for better compatibility with split view
        document.querySelectorAll('.widget').forEach(widget => {
            // Ensure widget has position relative for proper control positioning
            widget.style.position = 'relative';

            // Ensure the link takes full width
            const link = widget.querySelector('a');
            if (link) {
                link.style.display = 'block';
                link.style.width = '100%';
            }
        });

        // Add a helper function to fix widget visibility issues
        window.fixWidgetVisibility = function() {
            document.querySelectorAll('.metrics-item .widget').forEach(widget => {
                if (widget.style.display !== 'none') {
                    // Force redraw of the widget
                    widget.style.display = 'none';
                    void widget.offsetHeight;
                    widget.style.display = '';

                    // Ensure all content is visible
                    widget.querySelectorAll('a, .card, .card-body, .row, .col, h5, div').forEach(el => {
                        el.style.visibility = 'visible';
                        el.style.opacity = '1';
                    });
                }
            });
        };

        // Add a button to manually fix visibility issues (for debugging)
        @* const debugButton = document.createElement('button'); *@
        @* debugButton.textContent = 'Fix Visibility'; *@
        @* debugButton.className = 'btn btn-sm btn-outline-secondary mt-2'; *@
        @* debugButton.style.position = 'fixed'; *@
        @* debugButton.style.bottom = '10px'; *@
        @* debugButton.style.right = '10px'; *@
        @* debugButton.style.zIndex = '9999'; *@
        @* debugButton.addEventListener('click', window.fixWidgetVisibility); *@
        @* document.body.appendChild(debugButton); *@

        // Debug data coming from the server
        console.log("Municipality Labels:", @Html.Raw(Json.Serialize(ViewData["MunicipalityLabels"] ?? new List<string>())));
        console.log("Municipality Data:", @Html.Raw(Json.Serialize(ViewData["MunicipalityData"] ?? new List<int>())));

        // Debug data coming from the server
        console.log("Municipality Labels:", @Html.Raw(Json.Serialize(ViewData["MunicipalityLabels"] ?? new List<string>())));
        console.log("Municipality Data:", @Html.Raw(Json.Serialize(ViewData["MunicipalityData"] ?? new List<int>())));
        console.log("Industry Labels:", @Html.Raw(Json.Serialize(ViewData["IndustryLabels"] ?? new List<string>())));
        console.log("Industry Data:", @Html.Raw(Json.Serialize(ViewData["IndustryData"] ?? new List<int>())));
        console.log("Membership Type Labels:", @Html.Raw(Json.Serialize(ViewData["MembershipTypeLabels"] ?? new List<string>())));
        console.log("Membership Type Data:", @Html.Raw(Json.Serialize(ViewData["MembershipTypeData"] ?? new List<int>())));

        // Get data for all chart types
        var municipalityLabels = @Html.Raw(Json.Serialize(ViewData["MunicipalityLabels"] ?? new List<string>()));
        var municipalityData = @Html.Raw(Json.Serialize(ViewData["MunicipalityData"] ?? new List<int>()));
        var industryLabels = @Html.Raw(Json.Serialize(ViewData["IndustryLabels"] ?? new List<string>()));
        var industryData = @Html.Raw(Json.Serialize(ViewData["IndustryData"] ?? new List<int>()));
        var membershipTypeLabels = @Html.Raw(Json.Serialize(ViewData["MembershipTypeLabels"] ?? new List<string>()));
        var membershipTypeData = @Html.Raw(Json.Serialize(ViewData["MembershipTypeData"] ?? new List<int>()));

        // Global variables
        var pieChart = null;
        var breakdownChart = null;
        var refreshInterval = null;
        var currentPieChartType = 'doughnut';

        // Number animation for metric cards
        document.querySelectorAll('.count-up').forEach(counter => {
            const value = parseInt(counter.getAttribute('data-value'));
            if (!isNaN(value)) {
                animateCounter(counter, 0, value, 1000);
            }
        });

        function animateCounter(element, start, end, duration) {
            let startTimestamp = null;
            const step = (timestamp) => {
                if (!startTimestamp) startTimestamp = timestamp;
                const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                const currentValue = Math.floor(progress * (end - start) + start);
                element.textContent = currentValue.toLocaleString();
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }

        // Check if we have data to display
        if (municipalityLabels.length === 0 || municipalityData.length === 0) {
            console.warn("No municipality data available for chart");
            document.getElementById("breakdownBarChart").parentNode.innerHTML =
                '<div class="alert alert-warning">No municipality data available to display.</div>';
        }

        try {
            // Initialize the bar chart with municipality data first
            var ctxBar = document.getElementById("breakdownBarChart").getContext("2d");
            breakdownChart = new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: municipalityLabels,
                    datasets: [{
                        label: "Members by Municipality",
                        backgroundColor: "#4e73df",
                        hoverBackgroundColor: "#2e59d9",
                        borderColor: "#4e73df",
                        data: municipalityData
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.raw.toLocaleString();
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0,
                                stepSize: 1,
                                callback: function(value) {
                                    return Number(value).toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Toggle between municipality, industry, and membership type views
            document.getElementById('viewMunicipality').addEventListener('click', function() {
                updateChartView('municipality', this);
            });

            document.getElementById('viewIndustry').addEventListener('click', function() {
                updateChartView('industry', this);
            });

            // Add event listener for the new membership type button
            document.getElementById('viewMembershipType').addEventListener('click', function() {
                updateChartView('membershipType', this);
            });

            // Function to update chart view - made global for access from responsive code
            window.updateChartView = function(viewType, buttonElement) {
                // Show loading indicator
                const chartContainer = buttonElement.closest('.card').querySelector('.chart-container');
                const loader = chartContainer.querySelector('.chart-loader');
                if (loader) loader.style.display = 'flex';

                // Update button states for the regular button group
                document.querySelectorAll('#viewMunicipality, #viewIndustry, #viewMembershipType').forEach(btn => {
                    btn.classList.remove('active');
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-outline-primary');
                });

                // If the clicked element is from the button group, update its state
                if (buttonElement.id === 'viewMunicipality' || buttonElement.id === 'viewIndustry' || buttonElement.id === 'viewMembershipType') {
                    buttonElement.classList.add('active');
                    buttonElement.classList.add('btn-primary');
                    buttonElement.classList.remove('btn-outline-primary');
                }

                // Simulate loading delay for better UX
                setTimeout(() => {
                    // Update chart data based on selected view
                    if (viewType === 'municipality') {
                        breakdownChart.data.labels = municipalityLabels;
                        breakdownChart.data.datasets[0].data = municipalityData;
                        breakdownChart.data.datasets[0].label = "Members by Municipality";
                    } else if (viewType === 'industry') {
                        breakdownChart.data.labels = industryLabels;
                        breakdownChart.data.datasets[0].data = industryData;
                        breakdownChart.data.datasets[0].label = "Members by Industry";
                    } else if (viewType === 'membershipType') {
                        breakdownChart.data.labels = membershipTypeLabels;
                        breakdownChart.data.datasets[0].data = membershipTypeData;
                        breakdownChart.data.datasets[0].label = "Members by Membership Type";
                    }

                    breakdownChart.update();

                    // Hide loading indicator
                    if (loader) loader.style.display = 'none';
                }, 500);
            };
        } catch (error) {
            console.error("Error initializing breakdown chart:", error);
            document.getElementById("breakdownBarChart").parentNode.innerHTML =
                '<div class="alert alert-danger">Error initializing chart: ' + error.message + '</div>';
        }

        // Initialize the pie chart
        try {
            var ctxPie = document.getElementById("memberPieChart").getContext("2d");
            var goodStanding = @ViewData["GoodStandingCount"];
            var overduePayment = @ViewData["OverduePaymentCount"];
            var cancellations = @ViewData["CancellationCount"];

            console.log("Pie Chart Data:", goodStanding, overduePayment, cancellations);

            if (goodStanding === 0 && overduePayment === 0 && cancellations === 0) {
                console.warn("No data available for pie chart");
                document.getElementById("memberPieChart").parentNode.innerHTML =
                    '<div class="alert alert-warning">No membership data available to display.</div>';
                return;
            }

            pieChart = new Chart(ctxPie, {
                type: currentPieChartType,
                data: {
                    labels: ["Good Standing", "Overdue Payment", "Cancelled"],
                    datasets: [{
                         data: [goodStanding, overduePayment, cancellations],
                        backgroundColor: ['#36479B', '#933515', '#D9534F'],
                        hoverBackgroundColor: ['#4CA5C2', '#C66210', '#C82333']
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    cutout: '80%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const value = context.raw;
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: ${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // Chart type toggle
            document.querySelectorAll('.chart-type').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const chartType = this.getAttribute('data-type');
                    currentPieChartType = chartType;

                    // Show loading indicator
                    const chartContainer = this.closest('.card').querySelector('.chart-container');
                    const loader = chartContainer.querySelector('.chart-loader');
                    if (loader) loader.style.display = 'flex';

                    // Update chart with animation
                    setTimeout(() => {
                        pieChart.config.type = chartType;
                        if (chartType === 'doughnut') {
                            pieChart.options.cutout = '80%';
                        } else {
                            pieChart.options.cutout = 0;
                        }
                        pieChart.update();

                        // Hide loading indicator
                        if (loader) loader.style.display = 'none';
                    }, 300);
                });
            });

            // Download chart
            document.getElementById('downloadPieChart').addEventListener('click', function(e) {
                e.preventDefault();
                const canvas = document.getElementById('memberPieChart');
                const image = canvas.toDataURL('image/png');
                const link = document.createElement('a');
                link.download = 'membership-overview.png';
                link.href = image;
                link.click();
            });

        } catch (error) {
            console.error("Error initializing pie chart:", error);
            document.getElementById("memberPieChart").parentNode.innerHTML =
                '<div class="alert alert-danger">Error initializing chart: ' + error.message + '</div>';
        }


             // Dashboard Edit Functionality
    const editDashboardBtn = document.getElementById('editDashboardBtn');
    const saveDashboardBtn = document.getElementById('saveDashboardBtn');
    const cancelEditBtn = document.getElementById('cancelEditBtn');
    const dashboardEditControls = document.getElementById('dashboardEditControls');
    const widgetSelector = document.getElementById('widgetSelector');
    const layoutControls = document.getElementById('layoutControls');
    const widgets = document.querySelectorAll('.widget');
    const widgetControls = document.querySelectorAll('.widget-controls');
    const metricsContainer = document.getElementById('metricsContainer');
    const chartsContainer = document.getElementById('chartsContainer');
    const refreshDataBtn = document.getElementById('refreshDataBtn');
    const applyRefreshBtn = document.getElementById('applyRefreshBtn');
    const refreshIntervalSelect = document.getElementById('refreshInterval');

    // Layout control elements
    const layoutStandard = document.getElementById('layoutStandard');
    const layoutSplit = document.getElementById('layoutSplit');
    const splitViewOptions = document.getElementById('splitViewOptions');
    const splitConfigMetricsLeft = document.getElementById('splitConfigMetricsLeft');
    const splitConfigChartsLeft = document.getElementById('splitConfigChartsLeft');

    // Load saved dashboard configuration
    loadDashboardConfig();

    // Initialize refresh interval from saved config
    const savedRefreshInterval = localStorage.getItem('dashboardRefreshInterval');
    if (savedRefreshInterval) {
        refreshIntervalSelect.value = savedRefreshInterval;
        if (parseInt(savedRefreshInterval) > 0) {
            startAutoRefresh(parseInt(savedRefreshInterval));
        }
    }

    // Apply refresh interval
    applyRefreshBtn.addEventListener('click', function() {
        const interval = parseInt(refreshIntervalSelect.value);
        localStorage.setItem('dashboardRefreshInterval', interval);

        // Clear existing interval if any
        if (refreshInterval) {
            clearInterval(refreshInterval);
            refreshInterval = null;
        }

        // Start new interval if selected
        if (interval > 0) {
            startAutoRefresh(interval);
            showToast('Auto-refresh enabled. Dashboard will refresh every ' +
                (interval < 60 ? interval + ' seconds.' : (interval / 60) + ' minutes.'));
        } else {
            showToast('Auto-refresh disabled.');
        }
    });

    // Manual refresh
    refreshDataBtn.addEventListener('click', function() {
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-sync-alt fa-spin"></i> Refreshing...';

        // Show loading indicators
        document.querySelectorAll('.chart-loader').forEach(loader => {
            loader.style.display = 'flex';
        });

        // Simulate data refresh (in a real app, this would be an AJAX call)
        setTimeout(function() {
            // Update last refreshed time
            document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

            // Hide loading indicators
            document.querySelectorAll('.chart-loader').forEach(loader => {
                loader.style.display = 'none';
            });

            // Re-enable refresh button
            refreshDataBtn.disabled = false;
            refreshDataBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh Data';

            showToast('Dashboard data refreshed successfully!');
        }, 1500);
    });

    function startAutoRefresh(seconds) {
        refreshInterval = setInterval(function() {
            // Simulate a click on the refresh button
            refreshDataBtn.click();
        }, seconds * 1000);
    }

    function showToast(message) {
        // Create toast element if it doesn't exist
        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        const toastId = 'toast-' + Date.now();
        const toastHtml = `
            <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Dashboard</strong>
                    <small>Just now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            </div>
        `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);

        // Use Bootstrap's toast functionality if available, otherwise use a simple timeout
        const toastElement = document.getElementById(toastId);
        if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        } else {
            toastElement.style.display = 'block';
            setTimeout(() => {
                toastElement.style.display = 'none';
                toastElement.remove();
            }, 3000);
        }
    }

    // Layout Type Radio Change
    layoutStandard.addEventListener('change', function() {
        if (this.checked) {
            splitViewOptions.style.display = 'none';
            applyStandardLayout();
        }
    });

    layoutSplit.addEventListener('change', function() {
        if (this.checked) {
            splitViewOptions.style.display = 'block';

            // Force redraw of all widgets before applying split layout
            document.querySelectorAll('.widget').forEach(widget => {
                // Temporarily hide and show to force redraw
                const originalDisplay = widget.style.display;
                widget.style.display = 'block';
                // Force a reflow
                void widget.offsetHeight;
                // Restore original display
                widget.style.display = originalDisplay || '';
            });

            // Apply split layout with a slight delay to ensure DOM updates
            setTimeout(() => {
                applySplitLayout();

               // Additional check to ensure metrics are visible
                document.querySelectorAll('.metrics-item .widget').forEach(widget => {
                    if (widget.style.display !== 'none') {
                        widget.style.visibility = 'visible';
                        widget.style.opacity = '1';

                        // Ensure the link and card are visible
                        const link = widget.querySelector('a');
                        if (link) {
                            link.style.visibility = 'visible';
                            link.style.opacity = '1';
                            link.style.display = 'block';
                        }

                        const card = widget.querySelector('.card');
                        if (card) {
                            card.style.visibility = 'visible';
                            card.style.opacity = '1';
                        }
                    }
                });
            }, 50);
        }
    });

    // Split Config Radio Change
    splitConfigMetricsLeft.addEventListener('change', function() {
        if (this.checked) {
            applySplitLayout('metricsLeft');
        }
    });

    splitConfigChartsLeft.addEventListener('change', function() {
        if (this.checked) {
            applySplitLayout('chartsLeft');
        }
    });

    // Enter edit mode
    editDashboardBtn.addEventListener('click', function() {
        enterEditMode();
    });

    // Save changes
    saveDashboardBtn.addEventListener('click', function() {
        saveChanges();
    });

    // Cancel edit mode
    cancelEditBtn.addEventListener('click', function() {
        cancelEdit();
    });

    // Add event listeners for widget removal buttons
    document.querySelectorAll('.widget-remove').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const widget = this.closest('.widget');

            // Add fade-out animation
            widget.style.opacity = '1';
            widget.style.transition = 'opacity 0.3s ease';
            widget.style.opacity = '0';

            setTimeout(() => {
                widget.style.display = 'none';
                updateLayout();
            }, 300);
        });
    });

    // Add event listeners for widget addition buttons
    document.querySelectorAll('.add-widget').forEach(button => {
        button.addEventListener('click', function() {
            const widgetId = this.getAttribute('data-widget-id');
            const widget = document.querySelector(`.widget[data-widget-id="${widgetId}"]`);
            if (widget) {
                // Add fade-in animation
                widget.style.display = '';
                widget.style.opacity = '0';
                widget.classList.add('widget-appear');

                setTimeout(() => {
                    widget.style.opacity = '1';
                    updateLayout();

                    // Ensure charts are properly sized after showing
                    if (widgetId === 'membership-pie' || widgetId === 'municipality-chart') {
                        setTimeout(function() {
                            if (pieChart && widgetId === 'membership-pie') pieChart.resize();
                            if (breakdownChart && widgetId === 'municipality-chart') breakdownChart.resize();
                        }, 100);
                    }
                }, 10);
            }
        });
    });

    function enterEditMode() {
        // Show edit controls
        editDashboardBtn.style.display = 'none';
        dashboardEditControls.style.display = 'inline-block';
        widgetSelector.style.display = 'block';
        layoutControls.style.display = 'block';

        // Show widget controls
        widgetControls.forEach(control => {
            control.style.display = 'block';
        });

        // Add edit styling
        widgets.forEach(widget => {
            widget.classList.add('widget-edit-mode');
        });

        // Disable auto-refresh during edit mode
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    }

    function saveChanges() {
        // Hide edit controls
        exitEditMode();

        // Save configuration to localStorage
        saveDashboardConfig();

        // Update layout based on current settings
        updateLayout();

        // Restart auto-refresh if enabled
        const interval = parseInt(refreshIntervalSelect.value);
        if (interval > 0) {
            startAutoRefresh(interval);
        }

        // Show success notification
        showToast('Dashboard configuration saved successfully!');
    }

    function cancelEdit() {
        // Hide edit controls
        exitEditMode();

        // Revert to saved configuration
        loadDashboardConfig();

        // Restart auto-refresh if enabled
        const interval = parseInt(refreshIntervalSelect.value);
        if (interval > 0) {
            startAutoRefresh(interval);
        }
    }

    function exitEditMode() {
        editDashboardBtn.style.display = 'inline-block';
        dashboardEditControls.style.display = 'none';
        widgetSelector.style.display = 'none';
        layoutControls.style.display = 'none';

        // Hide widget controls
        widgetControls.forEach(control => {
            control.style.display = 'none';
        });

        // Remove edit styling
        widgets.forEach(widget => {
            widget.classList.remove('widget-edit-mode');
        });
    }

    function saveDashboardConfig() {
        const config = {
            layout: layoutSplit.checked ? 'split' : 'standard',
            splitConfig: splitConfigChartsLeft.checked ? 'chartsLeft' : 'metricsLeft',
            widgets: {}
        };

        widgets.forEach(widget => {
            const id = widget.getAttribute('data-widget-id');
            config.widgets[id] = widget.style.display !== 'none';
        });

        localStorage.setItem('crmDashboardConfig', JSON.stringify(config));
    }

    function loadDashboardConfig() {
        const savedConfig = localStorage.getItem('crmDashboardConfig');

        if (savedConfig) {
            const config = JSON.parse(savedConfig);

            // Set layout type
            if (config.layout === 'split') {
                layoutSplit.checked = true;
                splitViewOptions.style.display = 'block';

                // Set split configuration
                if (config.splitConfig === 'chartsLeft') {
                    splitConfigChartsLeft.checked = true;
                } else {
                    splitConfigMetricsLeft.checked = true;
                }

                applySplitLayout(config.splitConfig);
            } else {
                layoutStandard.checked = true;
                applyStandardLayout();
            }

            // Apply widget visibility
            if (config.widgets) {
                widgets.forEach(widget => {
                    const id = widget.getAttribute('data-widget-id');
                    if (config.widgets.hasOwnProperty(id)) {
                        widget.style.display = config.widgets[id] ? '' : 'none';
                    }
                });
            }

            // Set refresh interval
            if (config.refreshInterval) {
                refreshIntervalSelect.value = config.refreshInterval;
            }
        } else {
            // Default configuration - standard layout
            layoutStandard.checked = true;
            applyStandardLayout();

            // Make sure all metrics are visible
            document.querySelectorAll('.metrics-item .widget').forEach(widget => {
                widget.style.display = '';
            });
        }

        // Update layout to handle any empty containers
        updateLayout();
    }

    function applyStandardLayout() {
        // Remove any split layout row
        const splitRow = document.getElementById('splitLayoutRow');
        if (splitRow) {
            // Move containers back to dashboard content
            const dashboardContent = document.getElementById('dashboardContent');

            // Get the containers from the split row
            const containers = splitRow.querySelectorAll('#metricsContainer, #chartsContainer');
            containers.forEach(container => {
                dashboardContent.appendChild(container);
            });

            // Remove the split row
            splitRow.remove();
        }

        // Reset all column classes for metrics items
        document.querySelectorAll('.metrics-item').forEach(item => {
            item.className = 'col-xl-3 col-md-6 mb-4 metrics-item';
        });

        // Reset all column classes for chart containers
        document.querySelectorAll('#chartsContainer > div').forEach(item => {
            item.className = 'col-lg-6 mb-4';
        });

        // Ensure containers have row class
        metricsContainer.className = 'row';
        chartsContainer.className = 'row';

        // Force redraw of all widgets
        document.querySelectorAll('.widget').forEach(widget => {
            // Make sure widget is visible
            if (widget.style.display !== 'none') {
                // Force a reflow
                const display = window.getComputedStyle(widget).display;
                widget.style.display = 'none';
                void widget.offsetHeight; // Force reflow
                widget.style.display = display;
            }
        });

        // Resize charts if they exist
        setTimeout(function() {
            if (pieChart) pieChart.resize();
            if (breakdownChart) breakdownChart.resize();
        }, 100);

        console.log("Standard layout applied");
    }


            function applySplitLayout(config = null) {
            // Get the currently selected config if none is provided
            if (!config) {
                config = splitConfigChartsLeft.checked ? 'chartsLeft' : 'metricsLeft';
            }

            // Create a new row structure for the split view
            const dashboardContent = document.getElementById('dashboardContent');

            // Remove any existing clearfix elements
            document.querySelectorAll('#dashboardContent .clearfix').forEach(el => el.remove());

            // Reset container classes
            metricsContainer.className = '';
            chartsContainer.className = '';

            // Create a new row for the split layout
            const splitRow = document.createElement('div');
            splitRow.className = 'row';
            splitRow.id = 'splitLayoutRow';

            // Remove existing split row if any
            const existingSplitRow = document.getElementById('splitLayoutRow');
            if (existingSplitRow) {
                existingSplitRow.remove();
            }

            // Create columns for the split layout
            const leftCol = document.createElement('div');
            leftCol.className = 'col-md-6';

            const rightCol = document.createElement('div');
            rightCol.className = 'col-md-6';

            // Determine which content goes where
            if (config === 'metricsLeft') {
                // Move metrics to left column
                leftCol.appendChild(metricsContainer);
                // Move charts to right column
                rightCol.appendChild(chartsContainer);
            } else {
                // Move charts to left column
                leftCol.appendChild(chartsContainer);
                // Move metrics to right column
                rightCol.appendChild(metricsContainer);
            }

            // Add columns to the row
            splitRow.appendChild(leftCol);
            splitRow.appendChild(rightCol);

            // Add the row to the dashboard content
            dashboardContent.appendChild(splitRow);

            // Adjust metrics items to be full width in their container
            document.querySelectorAll('.metrics-item').forEach(item => {
                item.className = 'col-12 mb-4 metrics-item';
            });

            // Make charts full width in their container
            document.querySelectorAll('#chartsContainer > div').forEach(item => {
                item.className = 'col-12 mb-4';
            });

            // Force redraw of all widgets
            document.querySelectorAll('.widget').forEach(widget => {
                // Make sure widget is visible
                if (widget.style.display !== 'none') {
                    // Force a reflow
                    const display = window.getComputedStyle(widget).display;
                    widget.style.display = 'none';
                    void widget.offsetHeight; // Force reflow
                    widget.style.display = display;
                }
            });

            // Resize charts after layout change
            setTimeout(function() {
                if (pieChart) pieChart.resize();
                if (breakdownChart) breakdownChart.resize();
            }, 100);

            console.log("Split layout applied:", config);
        }

        function updateLayout() {
            // Check if metrics section has visible widgets
            const hasVisibleMetrics = Array.from(document.querySelectorAll('.metrics-item .widget'))
                .some(widget => widget.style.display !== 'none');

            // Check if charts section has visible widgets
            const hasVisibleCharts = Array.from(document.querySelectorAll('#chartsContainer .widget'))
                .some(widget => widget.style.display !== 'none');

            // If nothing is visible in a section, hide it
            metricsContainer.style.display = hasVisibleMetrics ? '' : 'none';
            chartsContainer.style.display = hasVisibleCharts ? '' : 'none';

            // If only one section is visible, make it full width
            if (hasVisibleMetrics && !hasVisibleCharts) {
                if (layoutStandard.checked) {
                    // No change needed, metrics are already responsive
                } else {
                    metricsContainer.className = 'col-md-12';

                    // Remove any clearfix elements
                    document.querySelectorAll('#dashboardContent .clearfix').forEach(el => el.remove());
                }
            } else if (!hasVisibleMetrics && hasVisibleCharts) {
                if (layoutStandard.checked) {
                    document.querySelectorAll('#chartsContainer > div').forEach(item => {
                        item.className = 'col-lg-12 mb-4';
                    });
                } else {
                    chartsContainer.className = 'col-md-12';

                    // Remove any clearfix elements
                    document.querySelectorAll('#dashboardContent .clearfix').forEach(el => el.remove());
                }
            } else if (hasVisibleMetrics && hasVisibleCharts) {
                // Both sections are visible, apply the selected layout
                if (layoutStandard.checked) {
                    applyStandardLayout();
                } else {
                    applySplitLayout();
                }
            }

            // Ensure metrics cards maintain proper styling
            document.querySelectorAll('.metrics-item .card').forEach(card => {
                // Reset any inline styles that might be causing issues
                card.style.visibility = '';
                card.style.opacity = '';

                // Make sure text elements are visible
                card.querySelectorAll('.text-gray-1200, .text-primary, h5').forEach(text => {
                    text.style.visibility = 'visible';
                    text.style.opacity = '1';
                });
            });

            // Resize charts after updating layout
            setTimeout(function() {
                if (pieChart) pieChart.resize();
                if (breakdownChart) breakdownChart.resize();
            }, 100);
        }

        // Handle window resize events
        let resizeTimer;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                // Resize charts when window size changes
                if (pieChart) pieChart.resize();
                if (breakdownChart) breakdownChart.resize();

                // For mobile view, ensure the layout is optimized
                if (window.innerWidth < 768 && layoutSplit.checked) {
                    // Force standard layout on small screens
                    layoutStandard.checked = true;
                    applyStandardLayout();
                }

                // Update chart view controls for responsive design
                updateChartViewControls();

                // Handle chart responsiveness for laptop view
                handleChartResponsiveness();
            }, 250);
        });

        // Function to check if we're on a mobile device or small screen
        function isMobileView() {
            return window.innerWidth < 768;
        }

        // Function to handle chart resizing specifically for laptop view
        function handleChartResponsiveness() {
            const isLaptopView = window.innerWidth >= 768 && window.innerWidth <= 1200;

            // Adjust chart container height for better visibility on laptop screens
            document.querySelectorAll('.chart-container').forEach(container => {
                if (isLaptopView) {
                    container.style.minHeight = '300px';
                    container.style.maxHeight = '350px';
                } else {
                    container.style.minHeight = '';
                    container.style.maxHeight = '';
                }
            });

            // Force chart resize
            if (breakdownChart) breakdownChart.resize();
            if (pieChart) pieChart.resize();
        }

        // Function to convert buttons to dropdown for responsive design
        function updateChartViewControls() {
            const chartHeader = document.querySelector('.widget[data-widget-id="municipality-chart"] .card-header');
            if (!chartHeader) return;

            // Get the existing elements
            const title = chartHeader.querySelector('h5');
            const btnGroup = chartHeader.querySelector('.btn-group');

            // Check if we're in laptop view (medium size screens)
            const isLaptopView = window.innerWidth >= 768 && window.innerWidth <= 1200;

            if (isMobileView() || isLaptopView) {
                // If mobile or laptop view and dropdown doesn't exist yet
                if (!chartHeader.querySelector('.dropdown')) {
                    // Hide button group
                    if (btnGroup) btnGroup.style.display = 'none';

                    // Create dropdown
                    const dropdown = document.createElement('div');
                    dropdown.className = 'dropdown';
                    dropdown.innerHTML = `
                        <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="chartViewDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            View Options
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="chartViewDropdown">
                            <a class="dropdown-item active" href="#" id="dropdownMunicipality">By Municipality</a>
                            <a class="dropdown-item" href="#" id="dropdownIndustry">By Industry</a>
                            <a class="dropdown-item" href="#" id="dropdownMembershipType">By Membership Type</a>
                        </div>
                    `;

                    // Add dropdown after title
                    title.after(dropdown);

                    // Add event listeners to dropdown items
                    document.getElementById('dropdownMunicipality').addEventListener('click', function(e) {
                        e.preventDefault();
                        updateChartView('municipality', this);
                        updateDropdownActiveState(this);
                    });

                    document.getElementById('dropdownIndustry').addEventListener('click', function(e) {
                        e.preventDefault();
                        updateChartView('industry', this);
                        updateDropdownActiveState(this);
                    });

                    document.getElementById('dropdownMembershipType').addEventListener('click', function(e) {
                        e.preventDefault();
                        updateChartView('membershipType', this);
                        updateDropdownActiveState(this);
                    });
                }
            } else {
                // If desktop view, show buttons and remove dropdown if it exists
                if (btnGroup) btnGroup.style.display = '';

                const dropdown = chartHeader.querySelector('.dropdown');
                if (dropdown) {
                    dropdown.remove();
                }
            }

            // Force chart resize after control changes
            setTimeout(function() {
                if (breakdownChart) breakdownChart.resize();
            }, 100);
        }

        // Helper function to update active state in dropdown
        function updateDropdownActiveState(clickedItem) {
            document.querySelectorAll('.dropdown-item').forEach(item => {
                item.classList.remove('active');
            });
            clickedItem.classList.add('active');

            // Update dropdown button text
            const dropdownButton = document.getElementById('chartViewDropdown');
            if (dropdownButton) {
                dropdownButton.textContent = clickedItem.textContent;
            }
        }

        // Add media query listener for responsive adjustments
        const mediaQuery = window.matchMedia('(max-width: 768px)');
        function handleMediaQueryChange(e) {
            if (e.matches && layoutSplit.checked) {
                // Force standard layout on small screens
                layoutStandard.checked = true;
                applyStandardLayout();
            }

            // Update chart view controls for responsive design
            updateChartViewControls();
        }

        // Register the listener
        if (mediaQuery.addEventListener) {
            mediaQuery.addEventListener('change', handleMediaQueryChange);
        } else {
            // Fallback for older browsers
            mediaQuery.addListener(handleMediaQueryChange);
        }

        // Initial check
        handleMediaQueryChange(mediaQuery);

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl+E to toggle edit mode
            if (e.ctrlKey && e.key === 'e') {
                e.preventDefault();
                if (dashboardEditControls.style.display === 'none') {
                    enterEditMode();
                } else {
                    cancelEdit();
                }
            }

            // Ctrl+S to save changes when in edit mode
            if (e.ctrlKey && e.key === 's' && dashboardEditControls.style.display !== 'none') {
                e.preventDefault();
                saveChanges();
            }

            // Ctrl+R to refresh data
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                refreshDataBtn.click();
            }
        });

        // Add accessibility improvements
        document.querySelectorAll('.widget').forEach(widget => {
            widget.setAttribute('tabindex', '0');
            widget.setAttribute('role', 'region');
            const widgetId = widget.getAttribute('data-widget-id');
            widget.setAttribute('aria-label', `${widgetId.replace(/-/g, ' ')} widget`);
        });

        // Initialize tooltips if Bootstrap is available
        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Add print-friendly functionality
        window.addEventListener('beforeprint', function() {
            // Ensure all widgets are visible for printing
            document.querySelectorAll('.widget').forEach(widget => {
                widget.style.display = 'block';
            });

            // Apply standard layout for printing
            applyStandardLayout();

            // Resize charts for better print quality
            if (pieChart) pieChart.resize();
            if (breakdownChart) breakdownChart.resize();
        });

        // Restore layout after print
        window.addEventListener('afterprint', function() {
            loadDashboardConfig();
        });

        // Call initially to set up responsive controls
        updateChartViewControls();

        // Initialize chart responsiveness
        handleChartResponsiveness();
    });
</script>

















