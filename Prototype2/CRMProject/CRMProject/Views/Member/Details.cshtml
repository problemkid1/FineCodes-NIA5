@using Microsoft.IdentityModel.Tokens
@model CRMProject.Models.Member

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Details - " + Model?.MemberName;
}

@* <!-- Display Success or Error Messages --> *@
@* @if (TempData["SuccessMessage"] != null) *@
@* { *@
@*     <div class="alert alert-success" role="alert"> *@
@*         @TempData["SuccessMessage"] *@
@*     </div> *@
@* } *@

@* @if (TempData.ContainsKey("ErrorMessage")) *@
@* { *@
@*     <div class="alert alert-danger" role="alert"> *@
@*         @TempData["ErrorMessage"] *@
@*     </div> *@
@* } *@

<!-- Display Success or Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-3 d-flex justify-content-between align-items-center" role="alert">
        <span>@TempData["SuccessMessage"]</span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            <i class="fa-solid fa-x"></i>
        </button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mt-3 d-flex justify-content-between align-items-center" role="alert">
        <span>@TempData["ErrorMessage"]</span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            <i class="fa-solid fa-x"></i>
        </button>
    </div>
}

<link href="~/theme/css/custom-colors.css" rel="stylesheet">
<link href="~/customs/css/style.css" rel="stylesheet">


<div class="card">
    <div class="card-body">
        <div class="d-flex align-items-center justify-content-between mb-3">            
            <h2 class="mb-0"><strong>Details - @Html.DisplayFor(model => model.MemberName)</strong></h2>
            <button class="btn btn-primary no-print me-3" onclick="window.print()" title="Print">
                <i class="fa-solid fa-print"></i> Print
            </button>
        </div>

        <hr />
        <!-- Two-Column Layout -->

        <div class="row">
            <div class="col-xl-1">
                <!-- Member Image -->
                <div class="photo">
                    @if (Model?.MemberPhoto?.Content != null && Model?.MemberPhoto?.MimeType != null)
                    {
                        string imageBase64 = Convert.ToBase64String(Model.MemberPhoto.Content);
                        string imageSrc = string.Format("data:{0};base64,{1}", Model.MemberPhoto.MimeType, imageBase64);
                        <img src="@imageSrc" alt="Profile Picture" class="img-fluid rounded" style="max-height: 300px; width: auto;" />
                    }
                    else
                    {
                        <img src="~/image/blankProfile.jpg" alt="Default Profile" class="img-fluid rounded" style="max-height: 300px; width: auto;" />
                    }
                </div>
            </div>


            <div class="col-xl-5">
                <dl class="summ-view">
                    <dt class="col-5">Contact</dt>
                    <dd class="col-7">
                        @if (Model.MemberContacts != null && Model.MemberContacts.Any())
                        {
                            var primaryContact = Model.MemberContacts.FirstOrDefault();
                            if (primaryContact != null)
                            {
                                <span>@primaryContact.Contact.ContactType</span>
                            }
                        }
                        else
                        {
                            <span>No contacts available</span>
                        }
                    </dd>

                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberStatus)</dt>
                    <dd class="col-7">@Html.DisplayFor(model => model.MemberStatus)</dd>
                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberAccountsPayableEmail)</dt>
                    <dd class="col-7">@Html.DisplayFor(model => model.MemberAccountsPayableEmail)</dd>
                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberWebsite)</dt>
                    <dd class="col-7">
                        @if (Model.MemberWebsite == null)
                        {
                            <span>N/A</span>
                        }
                        else
                        {
                            @Html.DisplayFor(model => model.MemberWebsite)

                        }
                    </dd>
                    <dt class="col-md-12">@Html.DisplayNameFor(model => model.MemberNotes)</dt>
                    <dd class="col-sm-12">
                        @if (Model.MemberNotes == null)
                        {
                            <span>No Current Notes</span>
                        }
                        else
                        {
                            <textarea class="form-control" readonly style="background-color: white;">@Model.MemberNotes</textarea>
                        }

                    </dd>
                </dl>
            </div>

            <div class="col-xl-5">
                <dl class="summ-view">
                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberLastContactDate)</dt>
                    <dd class="col-7">
                        @if (Model.MemberLastContactDate == null)
                        {
                            <span>N/A</span>
                        }
                        @Html.DisplayFor(model => model.MemberLastContactDate, "{0:yyyy-MM-dd}")
                    </dd>
                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberStartDate)</dt>
                    <dd class="col-7">@Html.DisplayFor(model => model.MemberStartDate, "{0:yyyy-MM-dd}")</dd>
                    @if (Model.MemberStatus == @CRMProject.Models.MemberStatus.Cancelled)
                    {
                        <dt class="col-5">Cancellation Date</dt>
                        <dd class="col-7">@Html.DisplayFor(model => model.MemberEndDate, "{0:yyyy-MM-dd}")</dd>

                        @* @if (Model.StatusHistories != null && Model.StatusHistories.Any())
                            {
                                var records = Model.StatusHistories.Select(m => m.Date).ToList();
                                var mostRecentDate = records.Max();
                                <span>@mostRecentDate.ToString("yyyy-MM-dd")</span>

                                @Html.DisplayFor(model => model.StatusHistories, "{0:yyyy-MM-dd}")

                            } *@

                    }

                    @* <dt class="col-5">Industry</dt>
                    <dd class="col-7">@Html.DisplayNameFor(model => model.MemberIndustries)
                        @if (Model.MemberIndustries != null && Model.MemberIndustries.Any())
                        {
                            var primaryIndustry = Model.MemberIndustries.FirstOrDefault();
                            if (primaryIndustry != null)
                            {
                                var words = primaryIndustry.Industry.Summary?.Split(' ');
                                var shortSummary = words?.Length > 3 ? string.Join(" ", words.Take(3)) : primaryIndustry.Industry.Summary;
                                var fullSummary = primaryIndustry.Industry.Summary;
                                <span>
                                    @shortSummary
                                    @if (words?.Length > 3)
                                    {
                                        <span id="moreText" style="display: none;"> @fullSummary.Substring(shortSummary.Length) </span>
                                        <a href="javascript:void(0);" id="readMore" onclick="toggleText()">... </a>
                                    }
                                </span>
                            }
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </dd> *@
                    <dt class="col-5">@Html.DisplayNameFor(model => model.MemberSize)</dt>
                    <dd class="col-7">
                        @if (Model.MemberSize == null)
                        {
                            <span>N/A</span>
                        }
                        @Html.DisplayFor(model => model.MemberSize)
                    </dd>
                    <dt class="col-5">City</dt>
                    <dd class="col-7">
                        @if (Model.Address != null)
                        {
                            <span>@Model.Address.AddressCity</span>
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </dd>
                </dl>
            </div>
        </div>
    </div>

    <div class="row-md-4 mt-4">
        @await Html.PartialAsync("_ListOfContacts", Model.MemberContacts)
    </div>
    <br />
    <div class="row-md-4">
        <!-- Added margin-top -->
        @await Html.PartialAsync("_ListOfAddress", Model.Address != null ? new List<Address> { Model.Address } : new List<Address>())
    </div>
    <br />
    <div class="row-md-4">
        <!-- Added margin-top -->
        @Html.Partial("_IndustryInfo", Model.MemberIndustries)
    </div>
    <br />
    <div class="row-md-4">
        <!-- Ensures consistent spacing -->
        @Html.Partial("_MembershipTypeInfo", Model.MemberMembershipTypes)
    </div>
</div>
<br />

<div class="form-group text-center">
    @if (Model?.ID != null)
    {
        @if (Model.MemberStatus == MemberStatus.Cancelled)
        {

        }
        else
        {
            @if (User.IsInRole("Admin"))
            {
                <a class="btn btn-warning no-print" asp-action="Edit" asp-route-id="@Model.ID">Edit Member</a>
            }
        }
    }
    <a class="btn btn-secondary ml-2 no-print" asp-action="Index">Back to Members</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        function toggleText() {
            var moreText = document.getElementById("moreText");
            var readMore = document.getElementById("readMore");

            if (moreText.style.display === "none") {
                moreText.style.display = "inline";
                readMore.innerHTML = " Read less";
            } else {
                moreText.style.display = "none";
                readMore.innerHTML = "... ";
            }
        }
    </script>

    <script>
         function toggleTextName(itemId) {
            var moreText = document.getElementById("moreTextName" + itemId);
            var readMore = document.getElementById("readMoreName" + itemId);

            // Toggle member name text
            if (moreText.style.display === "none") {
                moreText.style.display = "inline";
                readMore.innerHTML = " Read less";
            } else {
                moreText.style.display = "none";
                readMore.innerHTML = "... ";
            }
        }

        function toggleTextCity(itemId) {
            var moreText = document.getElementById("moreTextCity" + itemId);
            var readMore = document.getElementById("readMoreCity" + itemId);

            // Toggle member name text
            if (moreText.style.display === "none") {
                moreText.style.display = "inline";
                readMore.innerHTML = " Read less";
            } else {
                moreText.style.display = "none";
                readMore.innerHTML = "... ";
            }
        }

        function toggleTextIndustry(itemId) {
            var moreText = document.getElementById("moreTextIndustry" + itemId);
            var readMore = document.getElementById("readMoreIndustry" + itemId);

            // Toggle industry text
            if (moreText.style.display === "none") {
                moreText.style.display = "inline";
                readMore.innerHTML = " Read less";
            } else {
                moreText.style.display = "none";
                readMore.innerHTML = "... ";
            }
        }
    </script>
    <script>
        function toggleIndustry(id) {
            var countSpan = document.getElementById("industryCount" + id);
            var collapseElement = document.getElementById("collapseIndustry" + id);

            if (collapseElement.classList.contains("show")) {
                countSpan.style.display = "inline"; // Show the count when collapsed
            } else {
                countSpan.style.display = "none"; // Hide the count when expanded
            }
        }
    </script>
    <script type="text/javascript">
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>
}
