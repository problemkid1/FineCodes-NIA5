// <auto-generated />
using System;
using CRMProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMProject.Data.CRMMigrations
{
    [DbContext(typeof(CRMContext))]
    [Migration("20250323205250_AnnuaAndLamC")]
    partial class AnnuaAndLamC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("CRMProject.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Province")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.HasIndex("AddressLine1", "AddressCity", "Province", "PostalCode")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CRMProject.Models.AnnualActionItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionItem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Assignee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AnnualActionItems");
                });

            modelBuilder.Entity("CRMProject.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ContactEmailType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactInteractions")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitleRole")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactEmailAddress")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CRMProject.Models.Industry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryNAICSCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("IndustrySector")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("IndustrySubsector")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("IndustryNAICSCode")
                        .IsUnique();

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("CRMProject.Models.LAMContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("LAMContacts");
                });

            modelBuilder.Entity("CRMProject.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberAccountsPayableEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MemberEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MemberLastContactDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberNotes")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MemberSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MemberStartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MemberWebsite")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberAccountsPayableEmail")
                        .IsUnique();

                    b.HasIndex("MemberName")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("CRMProject.Models.MemberContact", b =>
                {
                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberID", "ContactID");

                    b.HasIndex("ContactID");

                    b.ToTable("MemberContacts");
                });

            modelBuilder.Entity("CRMProject.Models.MemberIndustry", b =>
                {
                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberID", "IndustryID");

                    b.HasIndex("IndustryID");

                    b.ToTable("MemberIndustries");
                });

            modelBuilder.Entity("CRMProject.Models.MemberLogin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("MemberLogins");
                });

            modelBuilder.Entity("CRMProject.Models.MemberMembershipType", b =>
                {
                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberID", "MembershipTypeID");

                    b.HasIndex("MembershipTypeID");

                    b.ToTable("MemberMembershipTypes");
                });

            modelBuilder.Entity("CRMProject.Models.MemberPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("MemberPhotos");
                });

            modelBuilder.Entity("CRMProject.Models.MemberThumbnail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("MemberThumbnails");
                });

            modelBuilder.Entity("CRMProject.Models.MembershipType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MembershipTypeBenefits")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipTypeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<double?>("MembershipTypeFee")
                        .HasColumnType("REAL");

                    b.Property<string>("MembershipTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MembershipTypeName")
                        .IsUnique();

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("CRMProject.Models.Opportunity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpportunityAction")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityInteractions")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpportunityLastContactDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityPriority")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpportunityStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("OpportunityName")
                        .IsUnique();

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("CRMProject.Models.OpportunityContact", b =>
                {
                    b.Property<int>("OpportunityID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OpportunityID", "ContactID");

                    b.HasIndex("ContactID");

                    b.ToTable("OpportunityContacts");
                });

            modelBuilder.Entity("CRMProject.Models.StatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID");

                    b.ToTable("StatusHistories");
                });

            modelBuilder.Entity("CRMProject.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberLoginID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PushAuth")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PushEndpoint")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PushP256DH")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberLoginID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CRMProject.Models.Address", b =>
                {
                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithOne("Address")
                        .HasForeignKey("CRMProject.Models.Address", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.LAMContact", b =>
                {
                    b.HasOne("CRMProject.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("CRMProject.Models.MemberContact", b =>
                {
                    b.HasOne("CRMProject.Models.Contact", "Contact")
                        .WithMany("MemberContacts")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithMany("MemberContacts")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.MemberIndustry", b =>
                {
                    b.HasOne("CRMProject.Models.Industry", "Industry")
                        .WithMany("MemberIndustries")
                        .HasForeignKey("IndustryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithMany("MemberIndustries")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.MemberMembershipType", b =>
                {
                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRMProject.Models.MembershipType", "MembershipType")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MembershipTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");
                });

            modelBuilder.Entity("CRMProject.Models.MemberPhoto", b =>
                {
                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithOne("MemberPhoto")
                        .HasForeignKey("CRMProject.Models.MemberPhoto", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.MemberThumbnail", b =>
                {
                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithOne("MemberThumbnail")
                        .HasForeignKey("CRMProject.Models.MemberThumbnail", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.OpportunityContact", b =>
                {
                    b.HasOne("CRMProject.Models.Contact", "Contact")
                        .WithMany("OpportunityContacts")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMProject.Models.Opportunity", "Opportunity")
                        .WithMany("OpportunityContacts")
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("CRMProject.Models.StatusHistory", b =>
                {
                    b.HasOne("CRMProject.Models.Member", "Member")
                        .WithMany("StatusHistories")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("CRMProject.Models.Subscription", b =>
                {
                    b.HasOne("CRMProject.Models.MemberLogin", "MemberLogin")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MemberLoginID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberLogin");
                });

            modelBuilder.Entity("CRMProject.Models.Contact", b =>
                {
                    b.Navigation("MemberContacts");

                    b.Navigation("OpportunityContacts");
                });

            modelBuilder.Entity("CRMProject.Models.Industry", b =>
                {
                    b.Navigation("MemberIndustries");
                });

            modelBuilder.Entity("CRMProject.Models.Member", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("MemberContacts");

                    b.Navigation("MemberIndustries");

                    b.Navigation("MemberMembershipTypes");

                    b.Navigation("MemberPhoto");

                    b.Navigation("MemberThumbnail");

                    b.Navigation("StatusHistories");
                });

            modelBuilder.Entity("CRMProject.Models.MemberLogin", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("CRMProject.Models.MembershipType", b =>
                {
                    b.Navigation("MemberMembershipTypes");
                });

            modelBuilder.Entity("CRMProject.Models.Opportunity", b =>
                {
                    b.Navigation("OpportunityContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
